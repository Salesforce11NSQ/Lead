public class LeadHandler {
    
    /*<-- Lead assignment to Queue using load balancing with number of open leads -->*/
    public static void assigningToQueue(List<Lead> lstLeads){
        
        List<Assignment_Filter__c> lst = [Select Id, Active__c, Assignment_Mode__c, Assign_To__c, Field_Name__c, Operator__c, Source__c, Value__c FROM Assignment_Filter__c WHERE Assignment_Mode__c = 'Load Balanced' AND Active__c = true ];
        if(!lst.isEmpty()){
            Map<Id, Assignment_Filter__c> leadMap = new Map<Id, Assignment_Filter__c>(lst);
            String FieldName;
            String Value;
            String assn;
            List<String> assigned = new List<String>();
            String source;
            String operator;
            for(Id recId  :leadMap.keySet()){
                Assignment_Filter__c rdObject = leadMap.get(recId);
                FieldName = rdObject.Field_Name__c;
                Value = rdObject.Value__c;
                assn = rdObject.Assign_To__c;
                source = rdObject.Source__c;
                operator = rdObject.Operator__c;
                
                assigned = assn.split(',') ;
                
                system.debug(assigned);
                if(source == 'Queue'){
                    for(Lead ld : lstLeads){
                        if(operator == NULL && FieldName == NULL && Value == NULL){
                            ld.OwnerId = queueAssignment(source, assigned);
                        }
                        if(operator == 'Equal' && FieldName != NULL && Value != NULL){
                            if(ld.get(FieldName)== Value){
                                ld.OwnerId = queueAssignment(source, assigned);
                            }
                        }
                        else if(operator == 'Not Equal' && FieldName != NULL && Value != NULL){
                            if(ld.get(FieldName) != Value){
                                ld.OwnerId = queueAssignment(source, assigned);
                            }
                        }
                        else if(operator == 'Greater Than' && FieldName != NULL && Value != NULL){
                            if(Integer.valueOf(ld.get(FieldName)) > Integer.valueOf(Value)){
                                ld.OwnerId = queueAssignment(source, assigned);
                            }
                        }
                        else if(operator == 'Less Than' && FieldName != NULL && Value != NULL){
                            if(Integer.valueOf(ld.get(FieldName)) < Integer.valueOf(Value)){
                                ld.OwnerId = queueAssignment(source, assigned);
                            }
                        }
                        else if(operator == 'Greater or Equal' && FieldName != NULL && Value != NULL){
                            if(Integer.valueOf(ld.get(FieldName)) >= Integer.valueOf(Value)){
                                ld.OwnerId = queueAssignment(source, assigned);
                            }
                        }
                        else if(operator == 'Less or Equal' && FieldName != NULL && Value != NULL){
                            if(Integer.valueOf(ld.get(FieldName)) <= Integer.valueOf(Value)){
                                ld.OwnerId = queueAssignment(source, assigned);
                            }
                        }
                    }
                }
                else if(source == 'User'){
                    for(Lead ld : lstLeads){
                        if(operator == NULL && FieldName == NULL && Value == NULL){
                            ld.OwnerId = queueAssignment(source, assigned);
                        }
                        if(operator == 'Equal' && FieldName != NULL && Value != NULL){
                            if(ld.get(FieldName)== Value){
                                ld.OwnerId = userAssignment(assigned);
                            }
                        }
                        else if(operator == 'Not Equal' && FieldName != NULL && Value != NULL){
                            if(ld.get(FieldName) != Value){
                                ld.OwnerId = userAssignment(assigned);
                            }
                        }
                        else if(operator == 'Greater Than' && FieldName != NULL && Value != NULL){
                            if(Integer.valueOf(ld.get(FieldName)) > Integer.valueOf(Value)){
                                ld.OwnerId = userAssignment(assigned);
                            }
                        }
                        else if(operator == 'Less Than' && FieldName != NULL && Value != NULL){
                            if(Integer.valueOf(ld.get(FieldName)) < Integer.valueOf(Value)){
                                ld.OwnerId = userAssignment(assigned);
                            }
                        }
                        else if(operator == 'Greater or Equal' && FieldName != NULL && Value != NULL){
                            if(Integer.valueOf(ld.get(FieldName)) >= Integer.valueOf(Value)){
                                ld.OwnerId = userAssignment(assigned);
                            }
                        }
                        else if(operator == 'Less or Equal' && FieldName != NULL && Value != NULL){
                            if(Integer.valueOf(ld.get(FieldName)) <= Integer.valueOf(Value)){
                                ld.OwnerId = userAssignment(assigned);
                            }
                        }
                    }
                }
            }
        }
    }
    
    public static String queueAssignment(String source, List<String> assigned){
        List<Group> lstQueue = [SELECT Id FROM Group WHERE (type LIKE : source AND Name IN : assigned)];
        
        List<GroupMember> grpList = [SELECT UserOrGroupId FROM GroupMember WHERE GroupId IN : lstQueue];
        
        List<AggregateResult> userIdWithLeadCountList = [SELECT OwnerId, Status, COUNT(Id) leadCount FROM Lead WHERE ((OwnerId IN (SELECT UserOrGroupId FROM GroupMember WHERE GroupId IN : lstQueue)) AND (Status = 'Open - Not Contacted' OR Status = 'Working - Contacted')) GROUP BY OwnerId, Status ORDER BY COUNT(Id)];
        
        // Converting above results into a Map
        Map<String, Integer> userIdWithLeadCountMap = new Map<String, Integer>();
        
        if(userIdWithLeadCountList.isEmpty()){
            for(GroupMember u :grpList){
                userIdWithLeadCountMap.put(u.UserOrGroupId, 0);
            }
        }
        
        else if(!userIdWithLeadCountList.isEmpty()){
            for(AggregateResult userIdWithLeadCount : userIdWithLeadCountList){
                userIdWithLeadCountMap.put((String) userIdWithLeadCount.get('OwnerId'), (Integer) userIdWithLeadCount.get('leadCount'));
            }
            Map<String, Integer> mp = new Map<String, Integer>();
            for(GroupMember u :grpList){
                if(userIdWithLeadCountMap.containsKey(u.UserOrGroupId)){
                    //break;
                }
                else {
                    mp.put(u.UserOrGroupId, 0);
                }
            }
            userIdWithLeadCountMap.putAll(mp);
        }
        
        // Looping through new Leads that need to be assigned
        String ownerId = grpList[0].UserOrGroupId;
        
        // Looping through UserIds
        if(userIdWithLeadCountMap.size()>0){
            for (String userId : userIdWithLeadCountMap.keySet()) {
                
                // Checking whether the currently specified owner has a fewer or equal count of Leads assigned than the User Id we are looping through
                if (userIdWithLeadCountMap.get(ownerId) <= userIdWithLeadCountMap.get(userId)) {
                    //break;
                } else {
                    ownerId = userId;
                }
            }
        }
        return ownerId;
    }
    
    public static String userAssignment(List<String> assigned){
        List<User> lstUsers = [SELECT Id FROM User WHERE Id IN : assigned];
        
        List<AggregateResult> userIdWithLeadCountList = [SELECT OwnerId, Status, COUNT(Id) leadCount FROM Lead WHERE ((OwnerId IN : lstUsers) AND (Status = 'Open - Not Contacted' OR Status = 'Working - Contacted')) GROUP BY OwnerId, Status ORDER BY COUNT(Id)];
        
        // Converting above results into a Map
        Map<String, Integer> userIdWithLeadCountMap = new Map<String, Integer>();
        
        if(userIdWithLeadCountList.isEmpty()){
            for(User u :lstUsers){
                userIdWithLeadCountMap.put(u.Id, 0);
            }
        }
        
        else if(!userIdWithLeadCountList.isEmpty()){
            for(AggregateResult userIdWithLeadCount : userIdWithLeadCountList){
                userIdWithLeadCountMap.put((String) userIdWithLeadCount.get('OwnerId'), (Integer) userIdWithLeadCount.get('leadCount'));
            }
            Map<String, Integer> mp = new Map<String, Integer>();
            for(User u :lstUsers){
                if(userIdWithLeadCountMap.containsKey(u.Id)){
                    //break;
                }
                else {
                    mp.put(u.Id, 0);
                }
            }
            userIdWithLeadCountMap.putAll(mp);
        }
        
        // Looping through new Leads that need to be assigned
        String ownerId = lstUsers[0].Id;
        
        // Looping through UserIds
        if(userIdWithLeadCountMap.size()>0){
            for (String userId : userIdWithLeadCountMap.keySet()) {
                
                // Checking whether the currently specified owner has a fewer or equal count of Leads assigned than the User Id we are looping through
                if (userIdWithLeadCountMap.get(ownerId) <= userIdWithLeadCountMap.get(userId)) {
                    //break;
                } else {
                    ownerId = userId;
                }
            }
        }
        return ownerId;
    }
}