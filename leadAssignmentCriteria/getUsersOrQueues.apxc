public class getUsersOrQueues {
    
    @AuraEnabled(cacheable = true)
    public static List<User> getUsers(){
        return [Select Id, Name from User];
    }
    
    @AuraEnabled(cacheable = true)
    public static List<Group> getQueues(){
        return [SELECT Id, Name FROM Group WHERE type = 'Queue'];
    }
    
    @AuraEnabled
    public static void createAssignmentFilterRecord(String objectName, String ruleName, String description, Boolean active, String fieldName, String oprtr, String val, String mode, String source, String assignTo){
        
        if(fieldName == NULL){
            fieldName = '';
        }
        if(oprtr == NULL){
            oprtr = '';
        }
        if(val == NULL){
            val = '';
        }
        
        Assignment_Filter__c af = new Assignment_Filter__c();
        af.Object_Name__c = objectName;
        af.Rule_Name__c = ruleName;
        af.Description__c = description;
        af.Active__c = active;
        af.Field_Name__c = fieldName;
        af.Operator__c = oprtr;
        af.Assignment_Mode__c = mode;
        af.Source__c = source;
        af.Assign_To__c = assignTo;
        af.Value__c = val;
        insert af;
    }
    
    @AuraEnabled(cacheable=true)
    public static List<Assignment_Filter__c> getRuleData(){
        List<Assignment_Filter__c> lstRuleData =  [Select Id, Object_Name__c, Description__c, Rule_Name__c, Active__c, Assignment_Mode__c, Assign_To__c, Field_Name__c, Operator__c, Source__c, Value__c FROM Assignment_Filter__c];
        
        if(!lstRuleData.isEmpty()){
            return lstRuleData;
        }
        else {
            return NULL;
        }
    }
    
    @AuraEnabled(cacheable=true)
    public static List<string> getObjects(){
        List<string> SObjectList = new List<string>();
        
        for(Schema.SObjectType objTyp : Schema.getGlobalDescribe().Values()){
            String name = objTyp.getDescribe().getName();
            
            if(!name.containsignorecase('history') && !name.containsignorecase('tag')&&
               !name.containsignorecase('share') && !name.containsignorecase('feed')){      
                   SobjectList.add(name);
               }
        }
        return SObjectList;
    }
}